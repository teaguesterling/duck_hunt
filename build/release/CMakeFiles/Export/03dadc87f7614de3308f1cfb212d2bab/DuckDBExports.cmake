# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.12")
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.12...3.29)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS duckdb duckdb_static duck_hunt_extension core_functions_extension parquet_extension jemalloc_extension duckdb_fmt duckdb_duckdb_pg_query duckdb_re2 duckdb_duckdb_miniz duckdb_utf8proc duckdb_hyperloglog duckdb_skiplistlib duckdb_fastpforlib duckdb_mbedtls duckdb_fsst duckdb_duckdb_yyjson duckdb_duckdb_zstd)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target duckdb
add_library(duckdb SHARED IMPORTED)

set_target_properties(duckdb PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "dl;duckdb_fsst;duckdb_fmt;duckdb_duckdb_pg_query;duckdb_re2;duckdb_duckdb_miniz;duckdb_utf8proc;duckdb_hyperloglog;duckdb_fastpforlib;duckdb_skiplistlib;duckdb_mbedtls;duckdb_duckdb_yyjson;duckdb_duckdb_zstd;Threads::Threads"
)

# Create imported target duckdb_static
add_library(duckdb_static STATIC IMPORTED)

set_target_properties(duckdb_static PROPERTIES
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "dl;duckdb_fsst;duckdb_fmt;duckdb_duckdb_pg_query;duckdb_re2;duckdb_duckdb_miniz;duckdb_utf8proc;duckdb_hyperloglog;duckdb_fastpforlib;duckdb_skiplistlib;duckdb_mbedtls;duckdb_duckdb_yyjson;duckdb_duckdb_zstd;Threads::Threads;duck_hunt_extension;core_functions_extension;parquet_extension;jemalloc_extension"
)

# Create imported target duck_hunt_extension
add_library(duck_hunt_extension STATIC IMPORTED)

set_target_properties(duck_hunt_extension PROPERTIES
  INTERFACE_LINK_LIBRARIES "duckdb_static;OpenSSL::SSL;OpenSSL::Crypto"
)

# Create imported target core_functions_extension
add_library(core_functions_extension STATIC IMPORTED)

set_target_properties(core_functions_extension PROPERTIES
  INTERFACE_LINK_LIBRARIES "duckdb_static"
)

# Create imported target parquet_extension
add_library(parquet_extension STATIC IMPORTED)

set_target_properties(parquet_extension PROPERTIES
  INTERFACE_LINK_LIBRARIES "duckdb_static"
)

# Create imported target jemalloc_extension
add_library(jemalloc_extension STATIC IMPORTED)

set_target_properties(jemalloc_extension PROPERTIES
  INTERFACE_LINK_LIBRARIES "duckdb_static"
)

# Create imported target duckdb_fmt
add_library(duckdb_fmt STATIC IMPORTED)

# Create imported target duckdb_duckdb_pg_query
add_library(duckdb_duckdb_pg_query STATIC IMPORTED)

# Create imported target duckdb_re2
add_library(duckdb_re2 STATIC IMPORTED)

# Create imported target duckdb_duckdb_miniz
add_library(duckdb_duckdb_miniz STATIC IMPORTED)

# Create imported target duckdb_utf8proc
add_library(duckdb_utf8proc STATIC IMPORTED)

# Create imported target duckdb_hyperloglog
add_library(duckdb_hyperloglog STATIC IMPORTED)

# Create imported target duckdb_skiplistlib
add_library(duckdb_skiplistlib STATIC IMPORTED)

# Create imported target duckdb_fastpforlib
add_library(duckdb_fastpforlib STATIC IMPORTED)

# Create imported target duckdb_mbedtls
add_library(duckdb_mbedtls STATIC IMPORTED)

# Create imported target duckdb_fsst
add_library(duckdb_fsst STATIC IMPORTED)

# Create imported target duckdb_duckdb_yyjson
add_library(duckdb_duckdb_yyjson STATIC IMPORTED)

# Create imported target duckdb_duckdb_zstd
add_library(duckdb_duckdb_zstd STATIC IMPORTED)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/DuckDBExports-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
