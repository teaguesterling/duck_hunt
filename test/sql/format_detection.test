# name: test/sql/format_detection.test
# description: test format detection and auto-detection capabilities
# group: [sql]

require duck_hunt

# Test 1: ESLint JSON auto-detection
query I
SELECT tool_name FROM parse_test_results('[{"filePath":"/test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"test","line":1,"column":8}]}]', 'auto');
----
eslint

# Test 2: Go test JSON auto-detection
query I
SELECT tool_name FROM parse_test_results('{"Action":"run","Package":"github.com/test","Test":"TestExample"}
{"Action":"fail","Package":"github.com/test","Test":"TestExample","Elapsed":0.001}', 'auto');
----
go_test

# Test 3: Generic lint auto-detection
query I
SELECT tool_name FROM parse_test_results('src/main.c:15:5: error: undeclared variable', 'auto');
----
lint

# Test 4: Make error auto-detection
query I
SELECT DISTINCT tool_name FROM parse_test_results('src/main.c:15:5: error: undeclared_var
make: *** [Makefile:23: build/main] Error 1', 'auto');
----
make

# Test 5: DuckDB test auto-detection
query I
SELECT tool_name FROM parse_test_results('[0/41] (0%): test/sql/basic.test
[1/41] (2%): test/sql/advanced.test
41 test cases:
  - 40 passed
  - 1 failed', 'auto');
----
duckdb_test

# Test 6: Pytest text auto-detection
query I
SELECT DISTINCT tool_name FROM parse_test_results('test_module.py::test_function PASSED
test_module.py::test_another FAILED', 'auto');
----
pytest

# Test 7: Format priority testing - DuckDB test should be detected before make error
query I
SELECT DISTINCT tool_name FROM parse_test_results('[0/41] (0%): test/sql/basic.test
41 test cases:
  - 40 passed
  - 1 failed
src/main.c:15:5: error: undeclared_var
make: *** [Makefile:23: build/main] Error 1', 'auto');
----
duckdb_test

# Test 8: Format priority testing - ESLint JSON should be detected before generic lint
query I
SELECT tool_name FROM parse_test_results('[{"filePath":"/test.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"test error","line":1,"column":8}]}]', 'auto');
----
eslint

# Test 9: Unknown format handling
query I
SELECT COUNT(*) FROM parse_test_results('random text that matches no patterns', 'auto');
----
0

# Test 10: Invalid JSON handling with auto-detection
query I
SELECT COUNT(*) FROM parse_test_results('{"invalid": json}', 'auto');
----
0

# Test 11: Empty content handling
query I
SELECT COUNT(*) FROM parse_test_results('', 'auto');
----
0

# Test 12: Whitespace-only content handling
query I
SELECT COUNT(*) FROM parse_test_results('   
   ', 'auto');
----
0

# Test 13: Mixed format content - should detect the first recognizable format
query I
SELECT tool_name FROM parse_test_results('{"Action":"run","Package":"github.com/test","Test":"TestExample"}
{"Action":"pass","Package":"github.com/test","Test":"TestExample","Elapsed":0.001}
src/main.c:15:5: error: undeclared variable', 'auto');
----
go_test

# Test 14: Test explicit format override vs auto-detection
statement ok
CREATE TABLE explicit_format AS 
SELECT * FROM parse_test_results('src/main.c:15:5: error: undeclared variable', 'generic_lint');

statement ok
CREATE TABLE auto_detected AS 
SELECT * FROM parse_test_results('src/main.c:15:5: error: undeclared variable', 'auto');

# Verify both produce the same results
query I
SELECT COUNT(*) FROM (
  SELECT tool_name, file_path, line_number, status, message
  FROM explicit_format
  EXCEPT
  SELECT tool_name, file_path, line_number, status, message
  FROM auto_detected
);
----
0

# Test 15: Complex ESLint JSON structure auto-detection
query I
SELECT tool_name FROM parse_test_results('[
  {
    "filePath": "/src/components/Button.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "React is defined but never used.",
        "line": 1,
        "column": 8
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "warningCount": 0
  }
]', 'auto');
----
eslint

# Clean up
statement ok
DROP TABLE explicit_format;

statement ok
DROP TABLE auto_detected;