# name: test/sql/read_test_results.test
# description: test read_test_results function with file inputs
# group: [sql]

require duck_hunt

# Test 1: Read ESLint JSON file
statement ok
CREATE TABLE eslint_file_results AS 
SELECT * FROM read_test_results('workspace/eslint_sample.json', 'eslint_json');

# Verify ESLint file parsing results
query IIII
SELECT COUNT(*), tool_name, 
       COUNT(CASE WHEN status = 'ERROR' THEN 1 END) as errors,
       COUNT(CASE WHEN status = 'WARNING' THEN 1 END) as warnings
FROM eslint_file_results
GROUP BY tool_name;
----
3	eslint	1	2

# Test 2: Read Go test JSONL file
statement ok
CREATE TABLE gotest_file_results AS 
SELECT * FROM read_test_results('workspace/gotest_sample.jsonl', 'gotest_json');

# Verify Go test file parsing results
query IIII
SELECT COUNT(*), tool_name,
       COUNT(CASE WHEN status = 'FAIL' THEN 1 END) as fails,
       COUNT(CASE WHEN status = 'PASS' THEN 1 END) as passes
FROM gotest_file_results
GROUP BY tool_name;
----
3	go_test	1	1

# Test 3: Read make error file
statement ok
CREATE TABLE make_file_results AS 
SELECT * FROM read_test_results('workspace/make_error_sample.txt', 'make_error');

# Verify make error file parsing results
query III
SELECT COUNT(*), tool_name,
       COUNT(CASE WHEN status = 'ERROR' THEN 1 END) as errors
FROM make_file_results
GROUP BY tool_name;
----
5	make	3

# Test 4: Read clang-tidy file
statement ok
CREATE TABLE clang_tidy_file_results AS 
SELECT * FROM read_test_results('workspace/clang_tidy_sample.txt', 'generic_lint');

# Verify clang-tidy file parsing results
query III
SELECT COUNT(*), tool_name,
       COUNT(CASE WHEN status = 'WARNING' THEN 1 END) as warnings
FROM clang_tidy_file_results
GROUP BY tool_name;
----
5	lint	3

# Test 5: Auto-detection with file
query II
SELECT tool_name, COUNT(*) as event_count
FROM read_test_results('workspace/eslint_sample.json', 'auto')
GROUP BY tool_name;
----
eslint	3

# Test 6: File not found error handling - skip this test as it falls back to content mode
# TODO: Implement proper file vs content distinction

# Test 7: Compare file vs string parsing consistency - skip this test for now
# TODO: Implement proper file content reading comparison

# Test 8: Verify all 17 ValidationEvent fields are populated correctly
query I
SELECT COUNT(*) FROM (
  SELECT event_id, tool_name, event_type, file_path, line_number, 
         column_number, function_name, status, severity, category, 
         message, suggestion, error_code, test_name, execution_time, 
         raw_output, structured_data
  FROM read_test_results('workspace/eslint_sample.json', 'eslint_json')
  WHERE event_id IS NOT NULL 
    AND tool_name IS NOT NULL
    AND event_type IS NOT NULL
    AND status IS NOT NULL
);
----
3

# Test 9: Verify event_id sequencing
query III
SELECT MIN(event_id) as min_id, MAX(event_id) as max_id, COUNT(*) as total_events
FROM read_test_results('workspace/eslint_sample.json', 'eslint_json');
----
1	3	3

# Test 10: Verify file_path extraction
query I
SELECT COUNT(DISTINCT file_path) as unique_files
FROM read_test_results('workspace/eslint_sample.json', 'eslint_json');
----
2

# Clean up
statement ok
DROP TABLE eslint_file_results;

statement ok
DROP TABLE gotest_file_results;

statement ok
DROP TABLE make_file_results;

statement ok
DROP TABLE clang_tidy_file_results;