# name: test/sql/parse_test_results.test
# description: test parse_test_results function with various formats
# group: [sql]

require duck_hunt

# Test 1: ESLint JSON format parsing
statement ok
CREATE TABLE eslint_results AS 
SELECT * FROM parse_test_results('[
  {
    "filePath": "/src/components/Button.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "React is defined but never used.",
        "line": 1,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar"
      },
      {
        "ruleId": "prefer-const",
        "severity": 1,
        "message": "value is never reassigned. Use const instead of let.",
        "line": 5,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "useConst"
      }
    ]
  }
]', 'eslint_json');

# Verify ESLint parsing results
query IIII
SELECT COUNT(*), tool_name, 
       COUNT(CASE WHEN status = 'ERROR' THEN 1 END) as errors,
       COUNT(CASE WHEN status = 'WARNING' THEN 1 END) as warnings
FROM eslint_results
GROUP BY tool_name;
----
2	eslint	1	1

# Test 2: Go test JSON format parsing
statement ok
CREATE TABLE gotest_results AS 
SELECT * FROM parse_test_results('{"Time":"2024-07-11T00:50:12.123456789Z","Action":"run","Package":"github.com/example/project","Test":"TestCalculator"}
{"Time":"2024-07-11T00:50:12.124567890Z","Action":"fail","Package":"github.com/example/project","Test":"TestCalculator","Elapsed":0.003}
{"Time":"2024-07-11T00:50:12.125678901Z","Action":"run","Package":"github.com/example/project","Test":"TestStringUtils"}
{"Time":"2024-07-11T00:50:12.126789012Z","Action":"pass","Package":"github.com/example/project","Test":"TestStringUtils","Elapsed":0.001}
{"Time":"2024-07-11T00:50:12.127890123Z","Action":"run","Package":"github.com/example/project","Test":"TestSkippedTest"}
{"Time":"2024-07-11T00:50:12.128901234Z","Action":"skip","Package":"github.com/example/project","Test":"TestSkippedTest","Elapsed":0.002}', 'gotest_json');

# Verify Go test parsing results
query IIII
SELECT COUNT(*), tool_name,
       COUNT(CASE WHEN status = 'FAIL' THEN 1 END) as fails,
       COUNT(CASE WHEN status = 'PASS' THEN 1 END) as passes
FROM gotest_results
GROUP BY tool_name;
----
3	go_test	1	1

# Test 3: Generic lint format parsing
statement ok
CREATE TABLE lint_results AS 
SELECT * FROM parse_test_results('src/main.c:15:5: error: undeclared_var undeclared (first use in this function)
src/main.c:20:12: warning: unused variable temp [-Wunused-variable]
src/utils.c:8:9: error: assignment to expression with array type', 'generic_lint');

# Verify generic lint parsing results
query IIII
SELECT COUNT(*), tool_name,
       COUNT(CASE WHEN status = 'ERROR' THEN 1 END) as errors,
       COUNT(CASE WHEN status = 'WARNING' THEN 1 END) as warnings
FROM lint_results
GROUP BY tool_name;
----
3	lint	2	1

# Test 4: Make error format parsing
statement ok
CREATE TABLE make_results AS 
SELECT * FROM parse_test_results('gcc -Wall -Wextra -g -o build/main src/main.c src/utils.c
src/main.c:15:5: error: undeclared_var undeclared
src/utils.c:8:9: error: assignment to expression with array type
make: *** [Makefile:23: build/main] Error 1', 'make_error');

# Verify make error parsing results
query III
SELECT COUNT(*), tool_name,
       COUNT(CASE WHEN status = 'ERROR' THEN 1 END) as errors
FROM make_results
GROUP BY tool_name;
----
3	make	3

# Test 5: Auto-detection capability
query II
SELECT tool_name, COUNT(*) as event_count
FROM parse_test_results('[{"filePath":"/test.js","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":3,"column":3}]}]', 'auto')
GROUP BY tool_name;
----
eslint	1

# Test 6: ValidationEvent schema completeness
query I
SELECT COUNT(*) FROM (
  SELECT event_id, tool_name, event_type, file_path, line_number, 
         column_number, function_name, status, severity, category, 
         message, suggestion, error_code, test_name, execution_time, 
         raw_output, structured_data
  FROM parse_test_results('src/test.c:1:1: error: test message', 'generic_lint')
);
----
1

# Test 7: Edge cases - empty input
query I
SELECT COUNT(*) FROM parse_test_results('', 'auto');
----
0

# Test 8: Edge cases - invalid JSON
query I
SELECT COUNT(*) FROM parse_test_results('invalid json content}', 'auto');
----
0

# Test 9: Edge cases - unknown format
query I
SELECT COUNT(*) FROM parse_test_results('random text content', 'unknown');
----
0

# Test 10: Field validation tests
query IIIIII
SELECT file_path, line_number, column_number, status, severity, error_code
FROM parse_test_results('[{"filePath":"/src/Button.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"React is defined but never used.","line":1,"column":8}]}]', 'eslint_json');
----
/src/Button.js	1	8	ERROR	error	no-unused-vars

# Clean up
statement ok
DROP TABLE eslint_results;

statement ok
DROP TABLE gotest_results;

statement ok
DROP TABLE lint_results;

statement ok
DROP TABLE make_results;