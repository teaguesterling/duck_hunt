# name: test/sql/duck_hunt_phase3a.test
# description: Test Phase 3A multi-file processing and pipeline intelligence
# group: [duck_hunt]

require duck_hunt

# Test single file processing with metadata (backward compatibility)
query IIIIII
SELECT source_file, build_id, environment, file_index, COUNT(*) as events, 
       COUNT(CASE WHEN status = 'PASS' THEN 1 END) as passes
FROM read_test_results('workspace/ansible_sample.txt', 'auto') 
GROUP BY source_file, build_id, environment, file_index;
----
workspace/ansible_sample.txt	NULL	NULL	0	106	12

# Test multi-file glob pattern processing - verify both file types exist
query I
SELECT COUNT(*) as files_with_ansible
FROM (
    SELECT source_file 
    FROM read_test_results('workspace/builds/**/*.txt', 'auto') 
    WHERE source_file LIKE '%ansible%'
    GROUP BY source_file
);
----
1

query I
SELECT COUNT(*) as files_with_terraform  
FROM (
    SELECT source_file
    FROM read_test_results('workspace/builds/**/*.txt', 'auto') 
    WHERE source_file LIKE '%terraform%'
    GROUP BY source_file
);
----
1

# Test build ID extraction (verify we get 2 distinct files, build IDs may vary by platform)
query I
SELECT COUNT(DISTINCT source_file) as file_count
FROM read_test_results('workspace/builds/**/*.txt', 'auto');
----
2

# Test CI logs file processing (verify individual pytest files can be read)
query I
SELECT COUNT(*) as events_found
FROM read_test_results('workspace/ci-logs/staging/pytest-results.txt', 'pytest_text');
----
4

# Test pipeline aggregation by build ID  
query IIIIII
WITH pipeline_summary AS (
    SELECT 
        build_id,
        COUNT(DISTINCT source_file) as files_processed,
        COUNT(*) as total_events,
        COUNT(CASE WHEN status = 'FAIL' THEN 1 END) as failures,
        COUNT(CASE WHEN status = 'PASS' THEN 1 END) as passes
    FROM read_test_results('workspace/builds/**/*.txt', 'auto')
    WHERE build_id IS NOT NULL
    GROUP BY build_id
)
SELECT 
    build_id,
    files_processed,
    total_events,
    failures,
    passes,
    CASE 
        WHEN failures = 0 THEN 'SUCCESS'
        WHEN failures > 0 AND passes > failures THEN 'MOSTLY_PASS'
        ELSE 'FAILURE'
    END as pipeline_status
FROM pipeline_summary
ORDER BY build_id;
----
123	1	106	2	12	MOSTLY_PASS
456	1	25	0	3	SUCCESS

# Test file index ordering and processing sequence
query II
SELECT (source_file LIKE '%terraform%')::INTEGER as is_terraform,
       (source_file LIKE '%ansible%')::INTEGER as is_ansible
FROM read_test_results('workspace/builds/**/*.txt', 'auto')
GROUP BY source_file
ORDER BY source_file;
----
0	1
1	0

# Test metadata column schema  
query I
SELECT COUNT(*) FROM (
    SELECT source_file, build_id, environment, file_index, event_type, status
    FROM read_test_results('workspace/ci-logs/staging/pytest-results.txt', 'pytest_text')
    LIMIT 1
);
----
1

# Test empty results for non-existent patterns
query I
SELECT COUNT(*) FROM read_test_results('workspace/nonexistent/**/*.txt', 'auto');
----
0